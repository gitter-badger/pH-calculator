library("tcltk")# setwd
# Set parameters --------------------------------------------------------------
# Please adjust all of the following parameters
sampleName = "pH 6.0 (DNP, +glu)"
#dirOutput = "/Users/munder/PhD/pH-measurements/"
#folderOutput = "2014_04_17_pHluorin_DNP/" # give name of output folder here
# Define functions ------------------------------------------------------------
calc_pH = function(df){
calc_pH_temp <- c_fit - log(a_fit/df-1)/b_fit - (2*sqrt(as.complex(-1))*pi)/b_fit
calc_pH <- Re(calc_pH_temp)
return(calc_pH)
}
stats = function(df){
mean<- mean(df)
sd <- sd(df)
sem <- sd / sqrt(length(df))
data.frame(mean, sd, sem)
}
# Calibrate -------------------------------------------------------------------
source(paste(directory, "calibrate/calibrate.R", sep=""))
# Read in measurements --------------------------------------------------------
temp = tk_choose.files(caption="Please select FITC/FITC measurements")
list_ff = sapply(temp, read.delim)
list_ff = t(list_ff)
data_ff = (as.vector(list_ff[ , "Mean1"]))[[1]]
temp = tk_choose.files(caption="Please select DAPI/FITC measurements")
list_df = sapply(temp, read.delim)
list_df = t(list_df)
data_df = (as.vector(list_df[ , "Mean1"]))[[1]]
rm(list_ff, list_df)
# Calculate and normalize ratios ----------------------------------------------
ratios = data_df/data_ff
# normalize ratios to pH 7.0 from calibration experiment
norm_ratios = ratios/mean_ratio_70
# stats ratios
stats_ratios = stats(norm_ratios)
# calculate pH ----------------------------------------------------------------
pH = calc_pH(norm_ratios)
# stats pH
stats_pH = stats(pH)
# Plot calculated pH onto calibration curve -----------------------------------
p = p + geom_point(aes(x=stats_pH$mean, y=stats_ratios$mean),
size=3, colour="red")
p = p + geom_errorbar(aes(x=stats_pH$mean, y=stats_ratios$mean,
ymin=stats_ratios$mean-stats_ratios$sem,
ymax=stats_ratios$mean+stats_ratios$sem),
width=.1, size=1, colour="red")
p = p + geom_line(aes(x=stats_pH$mean), size=1, colour="red", linetype="dashed")
p = p + geom_line(aes(y=stats_ratios$mean), size=1, colour="red", linetype="dashed")
p
ggsave(p, file=paste(sampleName, ".pdf", sep=""), width=7, height=5)
rm(list=setdiff(ls(), c("stats_pH", "p")))
# print("---------------------------------------------------------")
# print(paste("---------------------------------------------------------",
#             "The calculated pH is:", stats_pH$mean, sep=" "))
#### Measure pH with pHluorin2 ###
##
## Add description herre ##
##
####
# Set working directory -------------------------------------------------------
rm(list=ls()) # clean up
directory = "/Users/munder/Desktop/pH/"
setwd(directory)
# Load required packages ------------------------------------------------------
library("ggplot2")
library("plyr")
library("tcltk")# setwd
# Set parameters --------------------------------------------------------------
# Please adjust all of the following parameters
sampleName = "pH 6.0 (DNP, +glu)"
#dirOutput = "/Users/munder/PhD/pH-measurements/"
#folderOutput = "2014_04_17_pHluorin_DNP/" # give name of output folder here
# Define functions ------------------------------------------------------------
calc_pH = function(df){
calc_pH_temp <- c_fit - log(a_fit/df-1)/b_fit - (2*sqrt(as.complex(-1))*pi)/b_fit
calc_pH <- Re(calc_pH_temp)
return(calc_pH)
}
stats = function(df){
mean<- mean(df)
sd <- sd(df)
sem <- sd / sqrt(length(df))
data.frame(mean, sd, sem)
}
# function needed for visualization purposes
sigmoid = function(params, x) {
params[1] / (1 + exp(-params[2] * (x – params[3])))
}
#### Measure pH with pHluorin2 ###
##
## Add description herre ##
##
####
# Set working directory -------------------------------------------------------
rm(list=ls()) # clean up
directory = "/Users/munder/Desktop/pH/"
setwd(directory)
# Load required packages ------------------------------------------------------
library("ggplot2")
library("plyr")
library("tcltk")# setwd
# Set parameters --------------------------------------------------------------
# Please adjust all of the following parameters
sampleName = "pH 6.0 (DNP, +glu)"
#dirOutput = "/Users/munder/PhD/pH-measurements/"
#folderOutput = "2014_04_17_pHluorin_DNP/" # give name of output folder here
# Define functions ------------------------------------------------------------
calc_pH = function(df){
calc_pH_temp <- c_fit - log(a_fit/df-1)/b_fit - (2*sqrt(as.complex(-1))*pi)/b_fit
calc_pH <- Re(calc_pH_temp)
return(calc_pH)
}
stats = function(df){
mean<- mean(df)
sd <- sd(df)
sem <- sd / sqrt(length(df))
data.frame(mean, sd, sem)
}
# function needed for visualization purposes
sigmoid = function(params, x){
params[1] / (1 + exp(-params[2] * (x – params[3])))
}
sigmoid = function(params, x){
params[1] / (1 + exp(-params[2] * (x – params[3])))
}
#### Measure pH with pHluorin2 ###
##
## Add description herre ##
##
####
# Set working directory -------------------------------------------------------
rm(list=ls()) # clean up
directory = "/Users/munder/Desktop/pH/"
setwd(directory)
# Load required packages ------------------------------------------------------
library("ggplot2")
library("plyr")
library("tcltk")# setwd
# Set parameters --------------------------------------------------------------
# Please adjust all of the following parameters
sampleName = "pH 6.0 (DNP, +glu)"
#dirOutput = "/Users/munder/PhD/pH-measurements/"
#folderOutput = "2014_04_17_pHluorin_DNP/" # give name of output folder here
# Define functions ------------------------------------------------------------
calc_pH = function(df){
calc_pH_temp <- c_fit - log(a_fit/df-1)/b_fit - (2*sqrt(as.complex(-1))*pi)/b_fit
calc_pH <- Re(calc_pH_temp)
return(calc_pH)
}
stats = function(df){
mean<- mean(df)
sd <- sd(df)
sem <- sd / sqrt(length(df))
data.frame(mean, sd, sem)
}
# function needed for visualization purposes
sigmoid = function(params, x){
params[1] / (1 + exp(-params[2] * (x - params[3])))
}
setwd(paste(directory, "calibrate", sep=""))
temp <- list.files(pattern="df")
list_df <- sapply(temp, read.delim)
list_df <- t(list_df )
data_df <- data.frame(list_df[,"Mean1"])
temp <- list.files(pattern="ff")
list_ff <- sapply(temp, read.delim)
list_ff <- t(list_ff )
data_ff <- data.frame(list_ff[,"Mean1"])
# ratios
ratios <- data_df/data_ff
mean_ratios <- sapply(ratios,mean)
# normalize ratios to pH7
mean_ratio_70 = mean_ratios[[5]]
norm_mean_ratios = mean_ratios/mean_ratio_70
# sd and sem of normalized ratios
sd_norm <- sapply(ratios,sd)
sem_norm <- sd_norm/sqrt(length(data_df))
# create final dataframe
pH = c(5.0, 5.5, 6.0, 6.5, 7.0, 7.5, 8.0)
dataframe = data.frame(cbind(pH, norm_mean_ratios, sd_norm, sem_norm))
colnames(dataframe) = c('pH', 'Mean', 'SD','SEM')
RSiteSearch('gompertz', restrict='functions')
install package('qpcR')
installpackage('qpcR')
install.packages('qpcR')
library("qpcR", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
help(glm)
#### Measure pH with pHluorin2 ###
##
## Add description herre ##
##
####
# Set working directory -------------------------------------------------------
rm(list=ls()) # clean up
directory = "/Users/munder/Desktop/pH/"
setwd(directory)
# Load required packages ------------------------------------------------------
library("ggplot2")
library("plyr")
library("tcltk")# setwd
# Set parameters --------------------------------------------------------------
# Please adjust all of the following parameters
sampleName = "pH 6.0 (DNP, +glu)"
#dirOutput = "/Users/munder/PhD/pH-measurements/"
#folderOutput = "2014_04_17_pHluorin_DNP/" # give name of output folder here
# Define functions ------------------------------------------------------------
calc_pH = function(df){
calc_pH_temp <- c_fit - log(a_fit/df-1)/b_fit - (2*sqrt(as.complex(-1))*pi)/b_fit
calc_pH <- Re(calc_pH_temp)
return(calc_pH)
}
stats = function(df){
mean<- mean(df)
sd <- sd(df)
sem <- sd / sqrt(length(df))
data.frame(mean, sd, sem)
}
# This script generates a pH calibration curve based on measurements
# taken on September 3, 2013. For these measurements cells were treated
# exactly as descibed in Brett et al. 2005, (DOI: 10.1091/mbc.E04-11-0999),
# Figure 2B.
setwd(paste(directory, "calibrate", sep=""))
temp <- list.files(pattern="df")
list_df <- sapply(temp, read.delim)
list_df <- t(list_df )
data_df <- data.frame(list_df[,"Mean1"])
temp <- list.files(pattern="ff")
list_ff <- sapply(temp, read.delim)
list_ff <- t(list_ff )
data_ff <- data.frame(list_ff[,"Mean1"])
# ratios
ratios <- data_df/data_ff
mean_ratios <- sapply(ratios,mean)
# normalize ratios to pH7
mean_ratio_70 = mean_ratios[[5]]
norm_mean_ratios = mean_ratios/mean_ratio_70
# sd and sem of normalized ratios
sd_norm <- sapply(ratios,sd)
sem_norm <- sd_norm/sqrt(length(data_df))
# create final dataframe
pH = c(5.0, 5.5, 6.0, 6.5, 7.0, 7.5, 8.0)
dataframe = data.frame(cbind(pH, norm_mean_ratios, sd_norm, sem_norm))
colnames(dataframe) = c('pH', 'Mean', 'SD','SEM')
# curve fitting
#fit <- nls(Mean ~ a / (1 + exp (-b * (pH-c))), dataframe, start=list(a = 5, b = 5, c = 5))
fit = glm(Mean ~ pH, family=binomial(logit), data=dataframe)
fit = glm(Mean ~ pH, family=binomial(), data=dataframe)
fit = glm(Mean ~ pH, data=dataframe)
coef_fit <- coef(fit)
coef_fit
View(dataframe)
a_fit <- coef_fit[[1]]
b_fit <- coef_fit[[2]]
c_fit <- coef_fit[[3]]
p = ggplot(dataframe, aes(x=pH, y=Mean))
p = p + geom_point(size=4)
p = p + geom_errorbar(aes(ymin=Mean-SEM, ymax=Mean+SEM), width=.1, size=1)
p = p + scale_x_continuous(breaks=seq(5, 8, .5))
#p = p + geom_smooth(method="nls", formula = y ~ a / (1 + exp(-b * (x - c))),
# se=FALSE, start=list(a = 5, b = 5, c = 5), size=1)
p = p + labs(title=sampleName, x="pH",
y="normalized emission ratio")
p = p + theme_bw(base_size=24)
print(p)
p = ggplot(dataframe, aes(x=pH, y=Mean))
p = p + geom_point(size=4)
p = p + geom_errorbar(aes(ymin=Mean-SEM, ymax=Mean+SEM), width=.1, size=1)
p = p + scale_x_continuous(breaks=seq(5, 8, .5))
#p = p + geom_smooth(method="nls", formula = y ~ a / (1 + exp(-b * (x - c))),
# se=FALSE, start=list(a = 5, b = 5, c = 5), size=1)
p = p + geom_smooth(method="glm", formula = y ~ x)
p = p + labs(title=sampleName, x="pH",
y="normalized emission ratio")
p = p + theme_bw(base_size=24)
print(p)
help(family)
fit = glm(Mean ~ pH, family=quasibinomial(), data=dataframe)
fit3 <- lm( y~poly(x,3) )
fit3 <- lm(Mean~poly(pH,3))
fit4 <- lm(Mean~poly(pH,9))
fit3 <- lm(dataframe$Mean~poly(dataframe$pH,3))
p = ggplot(dataframe, aes(x=pH, y=Mean))
p = p + geom_point(size=4)
p = p + geom_errorbar(aes(ymin=Mean-SEM, ymax=Mean+SEM), width=.1, size=1)
p = p + scale_x_continuous(breaks=seq(5, 8, .5))
#p = p + geom_smooth(method="nls", formula = y ~ a / (1 + exp(-b * (x - c))),
# se=FALSE, start=list(a = 5, b = 5, c = 5), size=1)
p = p + geom_smooth(method="lm", formula = y~poly(x,3))
p = p + labs(title=sampleName, x="pH",
y="normalized emission ratio")
p = p + theme_bw(base_size=24)
print(p)
p = ggplot(dataframe, aes(x=pH, y=Mean))
p = p + geom_point(size=4)
p = p + geom_errorbar(aes(ymin=Mean-SEM, ymax=Mean+SEM), width=.1, size=1)
p = p + scale_x_continuous(breaks=seq(5, 8, .5))
#p = p + geom_smooth(method="nls", formula = y ~ a / (1 + exp(-b * (x - c))),
# se=FALSE, start=list(a = 5, b = 5, c = 5), size=1)
p = p + geom_smooth(method="lm", formula = y~poly(x,4))
p = p + labs(title=sampleName, x="pH",
y="normalized emission ratio")
p = p + theme_bw(base_size=24)
print(p)
p = ggplot(dataframe, aes(x=pH, y=Mean))
p = p + geom_point(size=4)
p = p + geom_errorbar(aes(ymin=Mean-SEM, ymax=Mean+SEM), width=.1, size=1)
p = p + scale_x_continuous(breaks=seq(5, 8, .5))
#p = p + geom_smooth(method="nls", formula = y ~ a / (1 + exp(-b * (x - c))),
# se=FALSE, start=list(a = 5, b = 5, c = 5), size=1)
p = p + geom_smooth(method="lm", formula = y~poly(x,9))
p = p + labs(title=sampleName, x="pH",
y="normalized emission ratio")
p = p + theme_bw(base_size=24)
print(p)
p = ggplot(dataframe, aes(x=pH, y=Mean))
p = p + geom_point(size=4)
p = p + geom_errorbar(aes(ymin=Mean-SEM, ymax=Mean+SEM), width=.1, size=1)
p = p + scale_x_continuous(breaks=seq(5, 8, .5))
#p = p + geom_smooth(method="nls", formula = y ~ a / (1 + exp(-b * (x - c))),
# se=FALSE, start=list(a = 5, b = 5, c = 5), size=1)
p = p + geom_smooth(method="lm", formula = y~poly(x,4))
p = p + labs(title=sampleName, x="pH",
y="normalized emission ratio")
p = p + theme_bw(base_size=24)
print(p)
coef_fit <- coef(fit)
a_fit <- coef_fit[[1]]
b_fit <- coef_fit[[2]]
c_fit <- coef_fit[[3]]
# Set working directory -------------------------------------------------------
rm(list=ls()) # clean up
directory = "/Users/munder/Desktop/pH/"
setwd(directory)
# Load required packages ------------------------------------------------------
library("ggplot2")
library("plyr")
library("tcltk")# setwd
# Set parameters --------------------------------------------------------------
# Please adjust all of the following parameters
sampleName = "pH 6.0 (DNP, +glu)"
#dirOutput = "/Users/munder/PhD/pH-measurements/"
#folderOutput = "2014_04_17_pHluorin_DNP/" # give name of output folder here
# Define functions ------------------------------------------------------------
calc_pH = function(df){
calc_pH_temp <- c_fit - log(a_fit/df-1)/b_fit - (2*sqrt(as.complex(-1))*pi)/b_fit
calc_pH <- Re(calc_pH_temp)
return(calc_pH)
}
stats = function(df){
mean<- mean(df)
sd <- sd(df)
sem <- sd / sqrt(length(df))
data.frame(mean, sd, sem)
}
setwd(paste(directory, "calibrate", sep=""))
temp <- list.files(pattern="df")
list_df <- sapply(temp, read.delim)
list_df <- t(list_df )
data_df <- data.frame(list_df[,"Mean1"])
temp <- list.files(pattern="ff")
list_ff <- sapply(temp, read.delim)
list_ff <- t(list_ff )
data_ff <- data.frame(list_ff[,"Mean1"])
# ratios
ratios <- data_df/data_ff
mean_ratios <- sapply(ratios,mean)
# normalize ratios to pH7
mean_ratio_70 = mean_ratios[[5]]
norm_mean_ratios = mean_ratios/mean_ratio_70
# sd and sem of normalized ratios
sd_norm <- sapply(ratios,sd)
sem_norm <- sd_norm/sqrt(length(data_df))
# create final dataframe
pH = c(5.0, 5.5, 6.0, 6.5, 7.0, 7.5, 8.0)
dataframe = data.frame(cbind(pH, norm_mean_ratios, sd_norm, sem_norm))
colnames(dataframe) = c('pH', 'Mean', 'SD','SEM')
# curve fitting
#fit <- nls(Mean ~ a / (1 + exp (-b * (pH-c))), dataframe, start=list(a = 5, b = 5, c = 5))
fit <- lm(dataframe$Mean~poly(dataframe$pH,4))
coef_fit <- coef(fit)
a_fit <- coef_fit[[1]]
b_fit <- coef_fit[[2]]
# plot
p = ggplot(dataframe, aes(x=pH, y=Mean))
p = p + geom_point(size=4)
p = p + geom_errorbar(aes(ymin=Mean-SEM, ymax=Mean+SEM), width=.1, size=1)
p = p + scale_x_continuous(breaks=seq(5, 8, .5))
#p = p + geom_smooth(method="nls", formula = y ~ a / (1 + exp(-b * (x - c))),
# se=FALSE, start=list(a = 5, b = 5, c = 5), size=1)
p = p + geom_smooth(method="lm", formula = y~poly(x,4))
p = p + labs(title=sampleName, x="pH",
y="normalized emission ratio")
p = p + theme_bw(base_size=24)
print(p)
coef_fit
p = ggplot(dataframe, aes(x=pH, y=Mean))
p = p + geom_point(size=4)
p = p + geom_errorbar(aes(ymin=Mean-SEM, ymax=Mean+SEM), width=.1, size=1)
p = p + scale_x_continuous(breaks=seq(5, 8, .5))
#p = p + geom_smooth(method="nls", formula = y ~ a / (1 + exp(-b * (x - c))),
# se=FALSE, start=list(a = 5, b = 5, c = 5), size=1)
p = p + geom_smooth(method="lm", formula = y~poly(x,4))
p = p + labs(title=sampleName, x="pH",
y="normalized emission ratio")
p = p + theme_bw(base_size=24)
print(p)
p = ggplot(dataframe, aes(x=pH, y=Mean))
p = p + geom_point(size=4)
p = p + geom_errorbar(aes(ymin=Mean-SEM, ymax=Mean+SEM), width=.1, size=1)
#p = p + scale_x_continuous(breaks=seq(5, 8, .5))
#p = p + geom_smooth(method="nls", formula = y ~ a / (1 + exp(-b * (x - c))),
# se=FALSE, start=list(a = 5, b = 5, c = 5), size=1)
p = p + geom_smooth(method="lm", formula = y~poly(x,4))
p = p + labs(title=sampleName, x="pH",
y="normalized emission ratio")
p = p + theme_bw(base_size=24)
print(p)
p = ggplot(dataframe, aes(x=pH, y=Mean))
p = p + geom_point(size=4)
p = p + geom_errorbar(aes(ymin=Mean-SEM, ymax=Mean+SEM), width=.1, size=1)
p = p + scale_x_continuous(breaks=seq(5, 8, .5))
#p = p + geom_smooth(method="nls", formula = y ~ a / (1 + exp(-b * (x - c))),
# se=FALSE, start=list(a = 5, b = 5, c = 5), size=1)
p = p + geom_smooth(method="lm", formula = y~poly(x,4))
p = p + labs(title=sampleName, x="pH",
y="normalized emission ratio")
p = p + theme_bw(base_size=24)
print(p)
coef_fit
p = ggplot(dataframe, aes(x=pH, y=Mean))
p = p + geom_point(size=4)
p = p + geom_errorbar(aes(ymin=Mean-SEM, ymax=Mean+SEM), width=.1, size=1)
p = p + scale_x_continuous(breaks=seq(5, 8, .5))
#p = p + geom_smooth(method="nls", formula = y ~ a / (1 + exp(-b * (x - c))),
# se=FALSE, start=list(a = 5, b = 5, c = 5), size=1)
p = p + geom_smooth(method="lm", formula = y~poly(x,3))
p = p + labs(title=sampleName, x="pH",
y="normalized emission ratio")
p = p + theme_bw(base_size=24)
print(p)
coef_fit
fit <- lm(dataframe$Mean~poly(dataframe$pH,3))
coef_fit
fit <- lm(dataframe$Mean~poly(dataframe$pH,3))
coef_fit <- coef(fit)
coef_fit <- coef(fit)
coef_fit
fit <- lm(dataframe$Mean~poly(dataframe$pH,4))
coef_fit <- coef(fit)
a_fit <- coef_fit[[1]]
b_fit <- coef_fit[[2]]
c_fit <- coef_fit[[3]]
d_fit <- coef_fit[[4]]
fit <- lm(dataframe$Mean~poly(dataframe$pH,4))
coef_fit <- coef(fit)
a_fit <- coef_fit[[1]]
b_fit <- coef_fit[[2]]
c_fit <- coef_fit[[3]]
d_fit <- coef_fit[[4]]
# plot
p = ggplot(dataframe, aes(x=pH, y=Mean))
p = p + geom_point(size=4)
p = p + geom_errorbar(aes(ymin=Mean-SEM, ymax=Mean+SEM), width=.1, size=1)
p = p + scale_x_continuous(breaks=seq(5, 8, .5))
p = p + geom_smooth(method="lm", formula = y~poly(x,4))
p = p + labs(title=sampleName, x="pH", y="normalized emission ratio")
p = p + theme_bw(base_size=24)
print(p)
# Set working directory -------------------------------------------------------
rm(list=ls()) # clean up
directory = "/Users/munder/Desktop/pH/"
setwd(directory)
# Load required packages ------------------------------------------------------
library("ggplot2")
library("plyr")
library("tcltk")# setwd
setwd(paste(directory, "calibrate", sep=""))
temp <- list.files(pattern="df")
list_df <- sapply(temp, read.delim)
list_df <- t(list_df )
data_df <- data.frame(list_df[,"Mean1"])
temp <- list.files(pattern="ff")
list_ff <- sapply(temp, read.delim)
list_ff <- t(list_ff )
data_ff <- data.frame(list_ff[,"Mean1"])
# ratios
ratios <- data_df/data_ff
mean_ratios <- sapply(ratios,mean)
# normalize ratios to pH7
mean_ratio_70 = mean_ratios[[5]]
norm_mean_ratios = mean_ratios/mean_ratio_70
# sd and sem of normalized ratios
sd_norm <- sapply(ratios,sd)
sem_norm <- sd_norm/sqrt(length(data_df))
# create final dataframe
pH = c(5.0, 5.5, 6.0, 6.5, 7.0, 7.5, 8.0)
dataframe = data.frame(cbind(pH, norm_mean_ratios, sd_norm, sem_norm))
colnames(dataframe) = c('pH', 'Mean', 'SD','SEM')
# curve fitting (using 4th order polynomial)
fit <- lm(dataframe$Mean~poly(dataframe$pH,4))
coef_fit <- coef(fit)
a_fit <- coef_fit[[1]]
b_fit <- coef_fit[[2]]
c_fit <- coef_fit[[3]]
d_fit <- coef_fit[[4]]
e_fit <- coef_fit[[5]]
library("polynom")
install.packages(polynom)
install.packages("polynom"")
)
)
