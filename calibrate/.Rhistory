library(midvest)
p <- plot_ly(midwest, x = percollege, color = state, type = "box")
p
library(plotly)
p <- plot_ly(z = volcano, type = "surface")
p
df_pi_abun <- read.csv("~/code/python/df_pi_abun.csv")
View(df_pi_abun)
library(plotly)
test = read.csv("~/code/python/df_pi_abun.csv")
p = ggplotly(test, aes(x=PI, y=MW))
p = p + geom_point()
p
library(ggplot2)
library(plotly)
test = read.csv("~/code/python/df_pi_abun.csv")
p = ggplot(test, aes(x=PI, y=MW))
p = p + geom_point()
p
ggplotly(p)
library(ggplot2)
library(plotly)
test = read.csv("~/code/python/df_pi_abun.csv")
p = ggplot(test, aes(x=PI, y=MW))
p = p + geom_point()
p = p + geom_text()
p
ggplotly(p)
library(ggplot2)
library(plotly)
df = read.csv("~/code/python/df.csv")
p = ggplot(df, aes(x=PI, y=MW))
p = p + geom_point()
p = p + geom_text(label=ID)
p
ggplotly(p)
p = ggplot(df, aes(x=PI, y=MW))
p = p + geom_point()
p = p + geom_text(label=df$ID)
p
library(ggplot2)
library(plotly)
df = read.csv("~/code/python/df.csv")
p = ggplot(df, aes(x=PI, y=MW))
p = p + geom_point()
p = p + geom_text(label=df$ID)
p
ggplotly(p)
library(ggplot2)
library(plotly)
df = read.csv("~/code/python/df.csv")
p = ggplot(df, aes(x=PI, y=MW))
p = p + geom_point()
p = p + geom_text(label='ID')
p
ggplotly(p)
p = ggplot(df, aes(x=PI, y=MW, label=rownames(df)))
p = p + geom_point()
p = p + geom_text()
p
p = ggplot(df, aes(x=PI, y=MW, label=rownames(df$ID)))
p = p + geom_point()
p = p + geom_text()
p
p = ggplot(df, aes(x=PI, y=MW, label=df$ID))
p = p + geom_point()
p = p + geom_text()
p
ggplotly(p)
library(ggplot2)
library(plotly)
# Plotly login
Sys.setenv("plotly_username"="matthiasmunder")
Sys.setenv("plotly_api_key"="8p41fkvp22")
df = read.csv("~/code/python/df.csv")
p = ggplot(df, aes(x=PI, y=MW, label=df$ID))
p = p + geom_point()
p = p + geom_text()
p
ggplotly(p)
library(ggplot2)
library(plotly)
# Plotly login
#Sys.setenv("plotly_username"="matthiasmunder")
#Sys.setenv("plotly_api_key"="8p41fkvp22")
df = read.csv("~/code/python/df.csv")
p = ggplot(df, aes(x=PI, y=MW, label=df$ID))
p = p + geom_point()
p = p + geom_text()
p
ggplotly(p)
Sys.setenv("plotly_username"="matthiasmunder")
Sys.setenv("plotly_api_key"="8p41fkvp22")
plotly_POST(p, filename = "r-docs/midwest-boxplots", world_readable=TRUE)
install_github('rentrez', 'ropensci')
library(rentrez)
install.packages('devtools')
install_github('rentrez', 'ropensci')
library(devtools)
install_github('rentrez', 'ropensci')
library(rentrez)
entrez_link(db='pubmed', dbfrom='pubmed', retmode='xml', id=19755503, cmd='neighbor')$file
sapply(xpathApply(out, "//Link", xmlValue), as.numeric)
#### Measure pH with pHluorin2 ###
##
## Timeseries in CellASICS chamber##
##
####
# Clean up --------------------------------------------------------------------
rm(list=ls()) # clean up
# Load required packages ------------------------------------------------------
library("ggplot2")
library("plyr")
library("tcltk2")
# Set parameters --------------------------------------------------------------
# Please adjust all of the following parameters
name = "pH56" # Must match the name of result files
timeRes = 10 # in minutes
# Set input and output directory ------------------------------------------
input_dir_measurements = tk_choose.dir(caption=("Select input directory containing measurement results."))
input_dir_calibration = tk_choose.dir(caption=("Select input directory containing calibration data."))
output_dir = tk_choose.dir(caption=("Select output directory. Dataframes and plots will be saved here."))
setwd(input_dir_calibration)
temp <- list.files(pattern="df")
list_df <- sapply(temp, read.delim)
View(list_df)
list_df <- t(list_df )
View(list_df)
data_df <- data.frame(list_df[,"Mean1"])
View(data_df)
setwd(input_dir_calibration)
temp <- list.files(pattern="df")
list_df <- sapply(temp, read.delim)
list_df <- t(list_df )
data_df <- data.frame(list_df[,"Mean1"])
setwd(input_dir_calibration)
temp <- list.files(pattern="df")
temp
#### Measure pH with pHluorin2 ###
##
## Timeseries in CellASICS chamber##
##
####
# Clean up --------------------------------------------------------------------
rm(list=ls()) # clean up
# Load required packages ------------------------------------------------------
library("ggplot2")
library("plyr")
library("tcltk2")
# Set parameters --------------------------------------------------------------
# Please adjust all of the following parameters
name = "pH56" # Must match the name of result files
timeRes = 10 # in minutes
# Set input and output directory ------------------------------------------
input_dir_measurements = tk_choose.dir(caption=("Select input directory containing measurement results."))
input_dir_calibration = tk_choose.dir(caption=("Select input directory containing calibration data."))
output_dir = tk_choose.dir(caption=("Select output directory. Dataframes and plots will be saved here."))
#### Measure pH with pHluorin2 ###
##
## Timeseries in CellASICS chamber##
##
####
# Clean up --------------------------------------------------------------------
rm(list=ls()) # clean up
# Load required packages ------------------------------------------------------
library("ggplot2")
library("plyr")
library("tcltk2")
# Set parameters --------------------------------------------------------------
# Please adjust all of the following parameters
name = "pH56" # Must match the name of result files
timeRes = 10 # in minutes
# Set input and output directory ------------------------------------------
input_dir_measurements = tk_choose.dir(caption=("Select input directory containing measurement results."))
input_dir_calibration = tk_choose.dir(caption=("Select input directory containing calibration data."))
output_dir = tk_choose.dir(caption=("Select output directory. Dataframes and plots will be saved here."))
setwd(input_dir_calibration)
temp <- list.files(pattern="df")
temp
list_df <- sapply(temp, read.delim)
View(list_df)
list_df <- t(list_df )
View(list_df)
data_df <- data.frame(list_df[,"Mean1"])
data_df <- data.frame(list_df[,"Mean"])
temp <- list.files(pattern="df")
list_df <- sapply(temp, read.delim)
list_df <- t(list_df )
data_df <- data.frame(list_df[,"Mean"])
View(list_df)
setwd(input_dir_calibration)
temp <- list.files(pattern="df")
list_df <- sapply(temp, read.delim)
list_df <- t(list_df )
data_df <- data.frame(list_df[,"Mean"])
View(list_df)
data = sapply(list_df, c("Mean"))
for(element in seq_along(list_df)){
print(element)
}
for(element in seq_along(list_df)){
print(list_df[element])
}
for(element in seq_along(list_df)){
print(element)
}
View(list_df)
for(i in 1:length(list_df)){
print(i)
}
View(list_df)
View(list_df)
length(list_df)
View(list_df)
for(i in 1:nrow(list_df)){
print(i)
}
for(i in 1:nrow(list_df)){
print(list_df[i])
}
for(i in 1:nrow(list_df)){
print(list_df[i]$Mean)
}
for(i in 1:nrow(list_df)){
print(list_df[i]))
}
for(i in 1:nrow(list_df)){
print(list_df[i])
}
for(i in 1:nrow(list_df)){
print(list_df[[i]])
}
for(i in 1:nrow(list_df)){
print(list_df[[i]][1])
}
for(i in 1:nrow(list_df)){
print(list_df[i][1])
}
for(i in 1:nrow(list_df)){
print(list_df[i][2])
}
for(i in 1:nrow(list_df)){
print(list_df[i][3])
}
list_df[1]
list_df[2]
list_df[2]$Mean
View(list_df)
list_df$Mean
list_df[2]
print(list_df[[2]])
print(list_df[[2,2]])
print(list_df[[1,2]])
print(list_df[[1,3]])
list_df[1,3]
test = sapply(list_df, c([1,3]) )
test = sapply(list_df, [1,3] )
test = sapply(list_df, list_df[1,3] )
temp <- list.files(pattern="df")
list_df <- sapply(temp, read.delim)
list_df <- t(list_df )
data_df = NULL
for(i in 1:nrow(list_df)){
data_df_temp = (list_df[i, 3])
data_df = c(data_df, data_df_temp)
}
temp <- list.files(pattern="df")
list_df <- sapply(temp, read.delim)
list_df <- t(list_df )
data_df = NULL
for(i in 1:nrow(list_df)){
data_df_temp = (list_df[i, 3])
data_df = data.frame(c(data_df, data_df_temp))
}
temp <- list.files(pattern="df")
list_df <- sapply(temp, read.delim)
list_df <- t(list_df )
data_df = NULL
for(i in 1:nrow(list_df)){
data_df_temp = list_df[i, 3]
data_df = c(data_df, data_df_temp)
}
temp <- list.files(pattern="df")
list_df <- sapply(temp, read.delim)
list_df <- t(list_df )
data_df = NULL
for(i in 1:nrow(list_df)){
data_df_temp = as.vector(list_df[i, 3])
data_df = c(data_df, data_df_temp)
}
list_df <- sapply(temp, read.delim)
list_df <- t(list_df )
data_df = NULL
for(i in 1:nrow(list_df)){
data_df_temp = as.vector(list_df[i, 3])
data_df = c(data_df, data_df_temp)
}
list_df[i, 3]
list_df[[i, 3]]
temp <- list.files(pattern="df")
list_df <- sapply(temp, read.delim)
list_df <- t(list_df )
data_df = NULL
for(i in 1:nrow(list_df)){
data_df_temp = as.vector(list_df[[i, 3]])
data_df = c(data_df, data_df_temp)
}
View(list_df)
temp <- list.files(pattern="df")
list_df <- sapply(temp, read.delim)
list_df <- t(list_df )
data_df = NULL
for(i in 1:nrow(list_df)){
data_df_temp = list_df[[i, 3]]
data_df = c(data_df, data_df_temp)
}
temp <- list.files(pattern="df")
list_df <- sapply(temp, read.delim)
list_df <- t(list_df )
vector_df = NULL
for(i in 1:nrow(list_df)){
data_df_temp = list_df[[i, 3]]
data_df = c(data_df, data_df_temp)
}
temp <- list.files(pattern="ff")
list_ff <- sapply(temp, read.delim)
list_ff <- t(list_ff )
vector_ff = NULL
for(i in 1:nrow(list_ff)){
data_df_temp = list_ff[[i, 3]]
data_df = c(data_ff, data_ff_temp)
}
temp <- list.files(pattern="df")
list_df <- sapply(temp, read.delim)
list_df <- t(list_df )
vector_df = NULL
for(i in 1:nrow(list_df)){
vector_df_temp = list_df[[i, 3]]
vector_df = c(vector_df, vector_df_temp)
}
temp <- list.files(pattern="ff")
list_ff <- sapply(temp, read.delim)
list_ff <- t(list_ff )
vector_ff = NULL
for(i in 1:nrow(list_ff)){
vector_df_temp = list_ff[[i, 3]]
vector_df = c(vector_ff, vector_ff_temp)
}
temp <- list.files(pattern="ff")
list_ff <- sapply(temp, read.delim)
list_ff <- t(list_ff )
vector_ff = NULL
for(i in 1:nrow(list_ff)){
vector_ff_temp = list_ff[[i, 3]]
vector_ff = c(vector_ff, vector_ff_temp)
}
temp <- list.files(pattern="df")
list_df <- sapply(temp, read.delim)
list_df <- t(list_df )
vector_df = NULL
for(i in 1:nrow(list_df)){
vector_df_temp = list_df[[i, 3]]
vector_df = c(vector_df, vector_df_temp)
}
temp <- list.files(pattern="ff")
list_ff <- sapply(temp, read.delim)
list_ff <- t(list_ff )
vector_ff = NULL
for(i in 1:nrow(list_ff)){
vector_ff_temp = list_ff[[i, 3]]
vector_ff = c(vector_ff, vector_ff_temp)
}
# This script generates a pH calibration curve based on measurements
# taken on September 3, 2013. For these measurements cells were treated
# exactly as descibed in Brett et al. 2005, (DOI: 10.1091/mbc.E04-11-0999),
# Figure 2B.
setwd(input_dir_calibration)
# Read in DAPI/FITC channel
temp <- list.files(pattern="df")
list_df <- sapply(temp, read.delim)
list_df <- t(list_df )
vector_df = NULL
for(i in 1:nrow(list_df)){
vector_df_temp = list_df[[i, 3]]
vector_df = c(vector_df, vector_df_temp)
}
# Read in DAPI/FITC channel
temp <- list.files(pattern="ff")
list_ff <- sapply(temp, read.delim)
list_ff <- t(list_ff )
vector_ff = NULL
for(i in 1:nrow(list_ff)){
vector_ff_temp = list_ff[[i, 3]]
vector_ff = c(vector_ff, vector_ff_temp)
}
# Read in TRITC/TRITC channel
temp <- list.files(pattern="tt")
list_tt <- sapply(temp, read.delim)
list_tt <- t(list_tt )
vector_tt = NULL
for(i in 1:nrow(list_tt)){
vector_tt_temp = list_tt[[i, 3]]
vector_tt = c(vector_tt, vector_tt_temp)
}
# Normalize to TRITC channel
norm_df = vector_df / vector_tt
norm_ff = vector_ff / vector_tt
# ratios
ratios <- norm_df/norm_ff
mean_ratios <- sapply(ratios,mean)
# normalize ratios to pH7
mean_ratio_70 = mean_ratios[[5]]
norm_mean_ratios = mean_ratios/mean_ratio_70
# sd and sem of normalized ratios
sd_ratio<- sapply(ratios,sd)
sem_ratio <- sd_ratio/sqrt(length(data_df))
# create final dataframe
pH = c(5.0, 5.5, 6.0, 6.5, 7.0, 7.5, 8.0)
dataframe = data.frame(cbind(pH, mean_ratios, sd_ratio, sem_ratio))
colnames(dataframe) = c('pH', 'Mean', 'SD','SEM')
# curve fitting
# what's the "best" fit?
x = dataframe$Mean
y = dataframe$pH
plot(x,y,pch=19)
#fit first degree polynomial equation:
fit  <- lm(y~x)
#second degree
fit2 <- lm(y~poly(x,2,raw=TRUE))
#third degree
fit3 <- lm(y~poly(x,3,raw=TRUE))
#fourth degree
fit4 <- lm(y~poly(x,4,raw=TRUE))
#generate range of 100 numbers between highers and lowest dataframe$mean
xx <- seq(min(x), max(x), length=1000)
plot(x,y,pch=19,ylim=c(4.8, 8.2))
lines(xx, predict(fit, data.frame(x=xx)), col="red")
lines(xx, predict(fit2, data.frame(x=xx)), col="green")
lines(xx, predict(fit3, data.frame(x=xx)), col="blue")
lines(xx, predict(fit4, data.frame(x=xx)), col="purple") # seems to be "best" here
best_fit = lm(y~poly(x,4,raw=TRUE))
# plot
p = ggplot(dataframe, aes(x=pH, y=Mean))
p = p + geom_point(size=4)
p = p + geom_errorbar(aes(ymin=Mean-SEM, ymax=Mean+SEM), width=.1, size=1)
p = p + scale_x_continuous(breaks=seq(5, 8, .5))
#p = p + scale_y_continuous(limits=c(0.5, 1.3), breaks=seq(0.5, 1.3, .1))
p = p + geom_smooth(method="lm", formula = y~poly(x,4), colour='blue') # "best" fit
p = p + labs(x="pH", y="normalized emission ratio")
p = p + theme_bw(base_size=24)
print(p)
# This script generates a pH calibration curve based on measurements
# taken on September 3, 2013. For these measurements cells were treated
# exactly as descibed in Brett et al. 2005, (DOI: 10.1091/mbc.E04-11-0999),
# Figure 2B.
setwd(input_dir_calibration)
# Read in DAPI/FITC channel
temp <- list.files(pattern="df")
list_df <- sapply(temp, read.delim)
list_df <- t(list_df )
vector_df = NULL
for(i in 1:nrow(list_df)){
vector_df_temp = list_df[[i, 3]]
vector_df = c(vector_df, vector_df_temp)
}
# Read in DAPI/FITC channel
temp <- list.files(pattern="ff")
list_ff <- sapply(temp, read.delim)
list_ff <- t(list_ff )
vector_ff = NULL
for(i in 1:nrow(list_ff)){
vector_ff_temp = list_ff[[i, 3]]
vector_ff = c(vector_ff, vector_ff_temp)
}
# Read in TRITC/TRITC channel
temp <- list.files(pattern="tt")
list_tt <- sapply(temp, read.delim)
list_tt <- t(list_tt )
vector_tt = NULL
for(i in 1:nrow(list_tt)){
vector_tt_temp = list_tt[[i, 3]]
vector_tt = c(vector_tt, vector_tt_temp)
}
norm_df = vector_df / vector_tt
norm_ff = vector_ff / vector_tt
ratios <- norm_df/norm_ff
mean_ratios <- sapply(ratios, mean)
rep('pH45', 6)
condition = c(rep('pH45', 6), rep('pH50', 6), rep('pH55', 6), rep('pH60', 6),
rep('pH65', 6),, rep('pH70', 6), rep('pH75', 6), rep('pH80', 6))
rep('pH45', 6)
c(rep('pH45', 6), rep('pH50', 6))
condition = c(rep('pH45', 6), rep('pH50', 6)), rep('pH55', 6), rep('pH60', 6),
rep('pH65', 6),, rep('pH70', 6), rep('pH75', 6), rep('pH80', 6))
condition = c(rep('pH45', 6), rep('pH50', 6)), rep('pH55', 6), rep('pH60', 6),
rep('pH65', 6), rep('pH70', 6), rep('pH75', 6), rep('pH80', 6))
condition = c(rep('pH45', 6), rep('pH50', 6)), rep('pH55', 6), rep('pH60', 6), rep('pH65', 6), rep('pH70', 6), rep('pH75', 6), rep('pH80', 6))
condition = c(rep('pH45', 6), rep('pH50', 6), rep('pH55', 6),
rep('pH60', 6), rep('pH65', 6), rep('pH70', 6),
rep('pH75', 6), rep('pH80', 6))
conditions = c(rep('pH45', 6), rep('pH50', 6), rep('pH55', 6),
rep('pH60', 6), rep('pH65', 6), rep('pH70', 6),
rep('pH75', 6), rep('pH80', 6))
df_df = cbind(conditions, vector_df)
temp <- list.files(pattern="df")
list_df <- sapply(temp, read.delim)
list_df <- t(list_df )
vector_df = NULL
for(i in 1:nrow(list_df)){
vector_df_temp = list_df[[i, 3]]
vector_df = c(vector_df, vector_df_temp)
}
